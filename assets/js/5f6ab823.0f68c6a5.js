"use strict";(self.webpackChunkhui_blog=self.webpackChunkhui_blog||[]).push([[944],{5704:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"public-api-consumption","metadata":{"permalink":"/hui-blog/blog/public-api-consumption","source":"@site/blog/2022-04-01-public-api-comsumption.md","title":"You want to consume apis, but how?","description":"The origin of most of our ideas and solutions are the daily problems that we face. Usually the reasoning behind it is just to make life easier (thats probably what Jeff Bezos thought when he started Amazon).","date":"2022-04-01T00:00:00.000Z","formattedDate":"April 1, 2022","tags":[{"label":"api","permalink":"/hui-blog/blog/tags/api"},{"label":"oath2","permalink":"/hui-blog/blog/tags/oath-2"},{"label":"curl","permalink":"/hui-blog/blog/tags/curl"},{"label":"http","permalink":"/hui-blog/blog/tags/http"}],"readingTime":2.955,"truncated":false,"authors":[],"frontMatter":{"slug":"public-api-consumption","title":"You want to consume apis, but how?","tags":["api","oath2","curl","http"]},"nextItem":{"title":"How to make your certificates available inside your Java container","permalink":"/hui-blog/blog/java-container-certificates"}},"content":"The origin of most of our ideas and solutions are the daily problems that we face. Usually the reasoning behind it is just to make life easier (thats probably what Jeff Bezos thought when he started Amazon).\\r\\n\\r\\nPersonally, I\'ve been looking for a house or apartment that is to my liking, well located and doesn\'t dry up my walled \ud83d\udcb8\ud83d\udcb8\ud83d\udcb8. So what I normally do is open a webpage called [Idealista](https://www.idealista.pt/pt/) which provided a real estate listing given desired parameters, which is most of the time equivelent to less money and more space.\\r\\nChecking the page daily and always finding the same old ads is a bit frustrating and time consuming so...why not make my life easier and become the next Jeff Bezos?\\r\\n\\r\\n## Request Access\\r\\n\\r\\nUsually all api providers they have a page or form where you can contact them and ask for access, in my case, Idealista makes it available through https://developers.idealista.com/access-request. But the experience should be very similar with any other platform, such as Twitter or Instagram.\\r\\n\\r\\nThey will ask you to describe your project and usage. For different use cases they provide different types of access.\\r\\n\\r\\nAs my use case is purely educational and personal, I was offered a free 100 requests per month tier.\\r\\n\\r\\n## Access granted\\r\\n\\r\\nOne day later I had received credentials and an example on how to interact with their api.\\r\\n\\r\\n```\\r\\nWe have enabled the access to idealista api(documentation is in the attachments):\\r\\nApikey: <APIKEY>\\r\\nSecret: <SECRET>\\r\\nAccess is free to a maximum of 100 req/month and it\u2019s limited by 1 req/sec. If you need to perform a greater number of requests, let us know.\\r\\nExample:\\r\\ncurl -X POST -H \\"Authorization: Bearer {{OAUTH_BEARER}}\\" -H \\"Content-Type: multipart/form-data;\\" -F \\"center=40.430,-3.702\\" -F \\"propertyType=homes\\" -F \\"distance=15000\\" -F \\"operation=sale\\" \\"https://api.idealista.com/3.5/es/search\\"\\r\\n```\\r\\n\\r\\n## Oauth Token\\r\\n\\r\\nOne of the parameters to access their api is an authentication bearer.\\r\\n\\r\\nWe can request a token using the credentials that was provided to us.\\r\\n\\r\\n```bash\\r\\ncurl -X POST -H \\"Authorization: Basic <B64(APIKEY:SECRET)>\\" -H \\"Content-Type: application/x-www-form-urlencoded;\\" --data \'grant_type=client_credentials\' \'https://api.idealista.com/oauth/token\'\\r\\n```\\r\\n\\r\\n`<B64(APIKEY:SECRET)>` is basically APIKEY and SECRET separated by a colon, and the encoded using base64. Many tools allows you to encode a string into b64 and [base64encode](https://www.base64encode.org/) was my choice this time as it is very easy and intuitive to use.\\r\\n\\r\\nIf the above command yields success, we should be getting an response similar to:\\r\\n\\r\\n```json\\r\\n{\\"access_token\\":\\"<ACCESS_TOKEN>\\",\\"token_type\\":\\"bearer\\",\\"expires_in\\":43199,\\"scope\\":\\"read\\",\\"jti\\":\\"c0fc3973-fbcb-4956-bb03-132a17d43faf\\"}\\r\\n```\\r\\n\\r\\n## My Sweet First Request\\r\\n\\r\\nNow that we\'re officially permissioned, let\'s give it a roll.\\r\\n\\r\\nUsing their example and the token that we have just retrieved:\\r\\n```\\r\\ncurl -X POST -H \\"Authorization: Bearer <ACCESS_TOKEN>\\" -H \\"Content-Type: multipart/form-data;\\" -F \\"center=40.430,-3.702\\" -F \\"propertyType=homes\\" -F \\"distance=15000\\" -F \\"operation=sale\\" \\"https://api.idealista.com/3.5/es/search\\"\\r\\n```\\r\\n\\r\\nWhich results in:\\r\\n\\r\\n```json\\r\\n{\\"elementList\\":[{\\"propertyCode\\":\\"97243617\\",\\"thumbnail\\":\\"https://img3.idealista.com/blur/WEB_LISTING/0/id.pro.es.image.master/84/5c/ca/973391027.jpg\\",\\"externalReference\\":\\"V224Q6\\",\\"numPhotos\\":21,\\"floor\\":\\"1\\",\\"price\\":1250000.0,\\"propertyType\\":\\"flat\\",\\"operation\\":\\"sale\\",\\"size\\":162.0,\\"exterior\\":true,\\"rooms\\":4,\\"bathrooms\\":3,\\"address\\":\\"barrio Castellana\\",\\"province\\":\\"Madrid\\",\\"municipality\\":\\"Madrid\\",\\"district\\":\\"Barrio de Salamanca\\",\\"country\\":\\"es\\",\\"neighborhood\\":\\"Castellana\\",\\"latitude\\":40.434576,\\"longitude\\":-3.6824301,\\"showAddress\\":false,\\"url\\":\\"https://www.idealista.com/inmueble/97243617/\\",\\"distance\\":\\"1732\\",\\"description\\":\\"\ud83d\udcdc\\",\\"hasVideo\\":true,\\"status\\":\\"good\\",\\"newDevelopment\\":false,\\"hasLift\\":true,\\"parkingSpace\\":{\\"hasParkingSpace\\":true,\\"isParkingSpaceIncludedInPrice\\":true},\\"priceByArea\\":7716.0,\\"detailedType\\":{\\"typology\\":\\"flat\\"},\\"suggestedTexts\\":{\\"subtitle\\":\\"Castellana, Madrid\\",\\"title\\":\\"Piso\\"},\\"hasPlan\\":true,\\"has3DTour\\":true,\\"has360\\":false,\\"hasStaging\\":false,\\"topNewDevelopment\\":false},{\\"propertyCode\\":\\"95688518\\",\\"thumbnail\\":\\"https://img3.idealista.com/blur/WEB_LISTING/0/id.pro.es.image.master/37/26/5d/954364457.jpg\\",\\"externalReference\\":\\"ag164339\\",\\"numPhotos\\":30,\\"floor\\":\\"5\\",\\"price\\":740000.0,\\"propertyType\\":\\"flat\\",\\"operation\\":\\"sale\\",\\"size\\":121.0,\\"exterior\\":true,\\"rooms\\":2,\\"bathrooms\\":2,\\"address\\":\\"DON RAM\xd3N DE LA CRUZ\\",\\"province\\":\\"Madrid\\",\\"municipality\\":\\"Madrid\\",\\"district\\":\\"Barrio de Salamanca\\",\\"country\\":\\"es\\",\\"neighborhood\\":\\"Goya\\",\\"latitude\\":40.4264599,\\"longitude\\":-3.671863,\\"showAddress\\":false,\\"url\\":\\"https://www.idealista.com/inmueble/95688518/\\",\\"distance\\":\\"2580\\",\\"description\\":\\"\ud83d\udcdc\\",\\"hasVideo\\":true,\\"status\\":\\"good\\",\\"newDevelopment\\":false,\\"hasLift\\":true,\\"parkingSpace\\":{\\"hasParkingSpace\\":true,\\"isParkingSpaceIncludedInPrice\\":true},\\"priceByArea\\":6116.0,\\"detailedType\\":{\\"typology\\":\\"flat\\"},\\"suggestedTexts\\":{\\"subtitle\\":\\"Goya, Madrid\\",\\"title\\":\\"Piso en DON RAM\xd3N DE LA CRUZ\\"},\\"hasPlan\\":true,\\"has3DTour\\":true,\\"has360\\":false,\\"hasStaging\\":true,\\"topNewDevelopment\\":false}\\r\\n...\\r\\n...\\r\\n...\\r\\n],\\"total\\":20570,\\"totalPages\\":1029,\\"actualPage\\":1,\\"itemsPerPage\\":20,\\"numPaginations\\":0,\\"hiddenResults\\":false,\\"summary\\":[\\"Comprar\\",\\"Viviendas\\",\\"barrio Trafalgar, Madrid\\",\\"Todos los precios\\",\\"Todos los tama\xf1os\\"],\\"alertName\\":\\"Viviendas en barrio Trafalgar, Madrid\\",\\"upperRangePosition\\":20,\\"paginable\\":true,\\"lowerRangePosition\\":0}\\r\\n```\\r\\n\\r\\nReplaced description with \ud83d\udcdc and removed most of the results due to the response being massive. But as you can see, we\'ve successfully invoked Idealist\'s api and got a response. \\r\\nNow it\'s time to create an [_Quarkus_](https://quarkus.io/) application with it, containerize, deploy to [_OpenShift_](http://redhat.com/en/technologies/cloud-computing/openshift) as a [_Knative_](http://knative.dev) [_Service_](https://github.com/knative/specs/blob/main/specs/serving/knative-api-specification-1.0.md#service) and call it periodically using a [_Ping Source_](https://knative.dev/docs/eventing/sources/ping-source/reference/) over a [_Channel_](https://knative.dev/docs/eventing/channels/) and sends me a message to my Telegram.\\r\\n\\r\\nJust kidding, that would be too much, right? (Stay tuned!)\\r\\n\\r\\n:::info\\r\\n\\r\\nI\'ve deliberately switched some sensitive information like `ACCESS_TOKEN`, `APIKEY` and `SECRET`, because 100 request per months is very limiting and I don\'t want everyone to use my resources. So hands off! \ud83d\ude45\u200d\u2642\ufe0f\ud83d\ude45\u200d\u2642\ufe0f\ud83d\ude45\u200d\u2642\ufe0f\\r\\n\\r\\n:::"},{"id":"java-container-certificates","metadata":{"permalink":"/hui-blog/blog/java-container-certificates","source":"@site/blog/2022-03-15-java-container-certificates.md","title":"How to make your certificates available inside your Java container","description":"This blog post takes you through different approaches to make your certificates available in your Java container running in a Kubernetes distribution. Going from the most static way to being able to dynamically change it during a Deployment rollout.","date":"2022-03-15T00:00:00.000Z","formattedDate":"March 15, 2022","tags":[{"label":"java","permalink":"/hui-blog/blog/tags/java"},{"label":"container","permalink":"/hui-blog/blog/tags/container"},{"label":"certificates","permalink":"/hui-blog/blog/tags/certificates"}],"readingTime":4.165,"truncated":false,"authors":[],"frontMatter":{"slug":"java-container-certificates","title":"How to make your certificates available inside your Java container","tags":["java","container","certificates"]},"prevItem":{"title":"You want to consume apis, but how?","permalink":"/hui-blog/blog/public-api-consumption"}},"content":"This blog post takes you through different approaches to make your certificates available in your Java container running in a Kubernetes distribution. Going from the most static way to being able to dynamically change it during a _Deployment_ rollout.\\r\\n\\r\\n## Import certificate through Dockerfile\\r\\n\\r\\nOne of the most direct ways to get your certificate into your container is add it to your Dockerfile. Lets imagine that you have a certificate `my-certificate.cer`. By copying it into your Docker container and importing it to the truststore during build time is going to make it permanent for the image container.\\r\\n\\r\\n```Dockerfile\\r\\nCOPY my-certificate.cer $JAVA_HOME/jre/lib/security\\r\\nRUN keytool -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias my-cert -file $JAVA_HOME/jre/lib/security/my-certificate.cer\\r\\n```\\r\\n\\r\\nThe above example assumes the following:\\r\\n\\r\\n - Your base image is Java based.\\r\\n - The default storepass is `changeit`. Change it if it is not.\\r\\n - `my-cert` is an example alias, use your own instead.\\r\\n\\r\\n## ConfigMap with a local cacerts\\r\\n\\r\\nIn contrast to the method presented before, which requires you to build your image everytime you want to change or import new certificates. Having it mounted as a volume into your container makes swapping certificates more cloud friendly.\\r\\n\\r\\n### Step 1 - Import certificate into truststore\\r\\n\\r\\nMake a copy or use your local cacerts store as the holder of your certificate. Importing it to the trustore:\\r\\n\\r\\n```bash\\r\\nkeytool -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias my-cert -file $JAVA_HOME/jre/lib/security/my-certificate.cer\\r\\n```\\r\\n\\r\\n### Step 2 - Create _ConfigMap_\\r\\n\\r\\nAssuming you already have your Java application running in your Kubernetes system, run:\\r\\n\\r\\n```bash\\r\\nexport NAMESPACE=<Namespace where your app is running>\\r\\nexport NAME=cacerts\\r\\nkubectl create configmap $NAME --from-file=$JAVA_HOME/jre/lib/security/cacerts -n $NAMESPACE\\r\\n```\\r\\n\\r\\nFor simplicity, we\'re calling our _configMap_ __cacerts__, but it could be any other name, as long as it is unique inside `$NAMESPACE`.\\r\\n\\r\\n### Step 3 - Mount _ConfigMap_ into _Deployment_\\r\\n\\r\\nTo mount cacerts configMap as a volume into your _Deployment_, create a volume entry referencing the configMap you\'ve just created, then add another volumeMount entry to the Java application container. See example below:\\r\\n\\r\\n```yaml\\r\\napiVersion: v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n  name: example\\r\\nspec:\\r\\n  containers:\\r\\n    - name: example\\r\\n      image: example_repo/example:latest\\r\\n      volumeMounts:\\r\\n      - name: cacerts\\r\\n        mountPath: /etc/pki/java/cacerts\\r\\n        subPath: cacerts\\r\\n  volumes:\\r\\n    - name: cacerts\\r\\n      configMap:\\r\\n        name: cacerts\\r\\n```\\r\\n\\r\\nYou can either modify your yaml directly on the console or open a `vim` editor in your command line by running:\\r\\n\\r\\n```bash\\r\\nkubectl edit deployment/example - n $NAMESPACE\\r\\n```\\r\\n## ConfigMap with certificates and Init-Container\\r\\n\\r\\nImporting a certificate into a truststore, creating a _ConfigMap_ and then mount it as a volume involves multiple manual steps which requires a set of specific tooling to be achieved, such as `keytool`, `kubectl` and possibly making changes directly in kubernetes console. Shoveling it all into your pipelines might not be as straight forward as it seems and ultimately not very kubebernetes native.\\r\\n\\r\\nTo overcome some of the issues mentioned above, we\'ll leverage [_initContainers_](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/), a first class kubernetes citizen, to do all the work for us and abstract the container image from everything else. Other benefits from this approach is the fact that every component of it becomes modular, making it plugable and reusable. And also, the original truststore is not overriden.\\r\\n\\r\\nThis time we start with a certificate, or an aggregate of certificates hosted in a _ConfigMap_. Using a similar command as before:\\r\\n\\r\\n```bash\\r\\nexport NAMESPACE=<Namespace where your app is running>\\r\\nexport NAME=certs\\r\\nkubectl create configmap $NAME --from-file=<your certificates file location> -n $NAMESPACE\\r\\n```\\r\\n\\r\\n```yaml\\r\\ninitContainers:\\r\\n  - name: initContainer\\r\\n    image: <a slim jdk image>\\r\\n    command:\\r\\n    - bash\\r\\n    - -c\\r\\n    - |\\r\\n      keytool -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias my-cert -file $JAVA_HOME/jre/lib/security/my-certificate.cer\\r\\n    volumeMounts:\\r\\n    - name: certs\\r\\n      mountPath: /etc/pki/java/my-certificate.cer\\r\\n      subPath: my-certificate.cer\\r\\n  volumes:\\r\\n    - name: certs\\r\\n      configMap:\\r\\n        name: certs\\r\\n```\\r\\n\\r\\nThe idea is to share a volume between the main container and the _initContainer_ where the truststore should be placed for consumption and then import the certificate into truststore during pod start-up. This way, if certificates need to be changed or renewed, all we need to do is to update the _ConfigMap_.\\r\\n\\r\\nDue to _initContainer_ being part of the _Deployment_ specification, it can be easily included in your helm charts without impacting your release workflow.\\r\\n\\r\\n## Cluster Operator and Init-Container\\r\\n\\r\\nIdeally, as a dev, managing or manipulating certificates shouldn\'t be part of our daily routine. If all of it could be abstracted and managed by the platform or infrastructure, you\'ve made the day for your developer.\\r\\n\\r\\nA step further into automating the previous method would be having the certificate created as a _ConfigMap_ for us.\\r\\n\\r\\nThis can be achieved using [cluster operators](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/), extending Kubernetes native capabilities with custom or 3rd party operators.\\r\\n\\r\\n:::tip\\r\\n\\r\\nA custom operator could be developed to fetch firm wide certificates and injects them into certain namespaces or deployments that has a very specific annotations configured, making them availabe to mount, or mount them directly into you _Deployment_.\\r\\n\\r\\n:::\\r\\n\\r\\n:::info\\r\\n\\r\\n\\r\\nFor recent years, there has been a new trend called Service Mesh, for e.g. [Istio](https://istio.io/latest/about/service-mesh/) that has built-in capabilities to solve the problem that initiated this post.\\r\\n\\r\\n:::"}]}')}}]);