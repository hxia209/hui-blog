"use strict";(self.webpackChunkhui_blog=self.webpackChunkhui_blog||[]).push([[944],{5704:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"java-container-certificates","metadata":{"permalink":"/hui-blog/blog/java-container-certificates","source":"@site/blog/2022-03-15-java-container-certificates.md","title":"How to make your certificates available inside your Java container","description":"This blog post takes you through different approaches to make your certificates available in your Java container running in a Kubernetes distribution. Going from the most static way to being able to dynamically change it during a Deployment rollout.","date":"2022-03-15T00:00:00.000Z","formattedDate":"March 15, 2022","tags":[{"label":"java","permalink":"/hui-blog/blog/tags/java"},{"label":"container","permalink":"/hui-blog/blog/tags/container"},{"label":"certificates","permalink":"/hui-blog/blog/tags/certificates"}],"readingTime":2.035,"truncated":false,"authors":[],"frontMatter":{"slug":"java-container-certificates","title":"How to make your certificates available inside your Java container","tags":["java","container","certificates"]}},"content":"This blog post takes you through different approaches to make your certificates available in your Java container running in a Kubernetes distribution. Going from the most static way to being able to dynamically change it during a _Deployment_ rollout.\\r\\n\\r\\n## Import certificate through Dockerfile\\r\\n\\r\\nOne of the most direct ways to get your certificate into your container is add it to your Dockerfile. Lets imagine that you have a certificate `my-certificate.cer`. By copying it into your Docker container and importing it to the truststore during build time is going to make it permanent for the image container.\\r\\n\\r\\n```Dockerfile\\r\\nCOPY my-certificate.cer $JAVA_HOME/jre/lib/security\\r\\nRUN keytool -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias my-cert -file $JAVA_HOME/jre/lib/security/my-certificate.cer\\r\\n```\\r\\n\\r\\nThe above example assumes the following:\\r\\n\\r\\n - Your base image is Java based.\\r\\n - The default storepass is `changeit`. Change it if it is not.\\r\\n - `my-cert` is an example alias, use your own instead.\\r\\n\\r\\n## ConfigMap with a local cacerts\\r\\n\\r\\nIn contrast to the method presented before, which requires you to build your image everytime you want to change or import new certificates. Having it mounted as a volume into your container makes swapping certificates more cloud friendly.\\r\\n\\r\\n### Step 1 - Import certificate into truststore\\r\\n\\r\\nMake a copy or use your local cacerts store as the holder of your certificate. Importing it to the trustore:\\r\\n\\r\\n```bash\\r\\nkeytool -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias my-cert -file $JAVA_HOME/jre/lib/security/my-certificate.cer\\r\\n```\\r\\n\\r\\n### Step 2 - Create _ConfigMap_\\r\\n\\r\\nAssuming you already have your Java application running in your Kubernetes system, run:\\r\\n\\r\\n```bash\\r\\nexport NAMESPACE=<Namespace where your app is running>\\r\\nexport NAME=cacerts\\r\\nkubectl create configmap $NAME --from-file=$JAVA_HOME/jre/lib/security/cacerts -n $NAMESPACE\\r\\n```\\r\\n\\r\\nFor simplicity, we\'re calling our _configMap_ __cacerts__, but it could be any other name, as long as it is unique inside `$NAMESPACE`.\\r\\n\\r\\n### Step 3 - Mount _ConfigMap_ into __Deployment_\\r\\n\\r\\nTo mount cacerts configMap as a volume into your _Deployment_, create a volume entry referencing the configMap you\'ve just created, then add another volumeMount entry to the Java application container. See example below:\\r\\n\\r\\n```yaml\\r\\napiVersion: v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n  name: example\\r\\nspec:\\r\\n  containers:\\r\\n    - name: example\\r\\n      image: example_repo/example:latest\\r\\n      volumeMounts:\\r\\n      - name: cacerts\\r\\n        mountPath: /etc/pki/java/cacerts\\r\\n        subPath: cacerts\\r\\n  volumes:\\r\\n    - name: cacerts\\r\\n      configMap:\\r\\n        name: cacerts\\r\\n```\\r\\n\\r\\nYou can either modify your yaml directly on the console or open a `vim` editor in your command line by running:\\r\\n\\r\\n```bash\\r\\nkubectl edit deployment/example - n $NAMESPACE\\r\\n```\\r\\n## ConfigMap with certificates and Init-Container\\r\\n\\r\\n## Cluster Operator and Init-Container"}]}')}}]);